require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Destinations::CardsController do
  auth_admin
  before do
    @destination = FactoryGirl.create(:destination_1)
  end

  # This should return the minimal set of attributes required to create a valid
  # Card. As you add validations to Card, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { status: :in_progress }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CardsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET show" do
    describe "exists" do
      it "assigns the requested card as @card" do
        card = @destination.create_card! valid_attributes
        get :show, {:destination_id => @destination.id}, valid_session
        assigns(:card).should eq(card)
      end
    end
    describe "not exists" do
      it "destination" do
        expect {
          get :show, {:destination_id => 999}, valid_session
        }.to raise_error ActiveRecord::RecordNotFound
      end
      it "card" do
        destination = Destination.create!(name: 'Name', email: 'email@example.com')
        get :show, {:destination_id => destination.id}, valid_session
        response.status.should be 404
      end
    end
  end

  describe "GET new" do
    it "assigns a new card as @card" do
      get :new, {:destination_id => @destination.id}, valid_session
      assigns(:card).should be_a_new(Card)
    end
  end

  describe "GET edit" do
    it "assigns the requested card as @card" do
      card = @destination.create_card! valid_attributes
      get :edit, {:destination_id => @destination.id}, valid_session
      assigns(:card).should eq(card)
    end
  end

  describe "POST create" do
    it "not implemented" do
      post :create, {:destination_id => @destination.id, :card => valid_attributes}, valid_session
      response.status.should be 501
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "creates a new Card" do
        expect {
          put :update, {:destination_id => @destination.id, :card => valid_attributes}, valid_session
        }.to change(Card, :count).by(1)
      end

      it "assigns a newly created card as @card" do
        put :update, {:destination_id => @destination.id, :card => valid_attributes}, valid_session
        assigns(:card).should be_a(Card)
        assigns(:card).should be_persisted
      end

      it "updates the requested card" do
        card = @destination.create_card! valid_attributes
        Card.any_instance.should_receive(:assign_attributes).with({ "status" => "ready" })
        put :update, {:destination_id => @destination.id, :card => { "status" => "ready" }}, valid_session
      end

      it "assigns the requested card as @card" do
        card = @destination.create_card! valid_attributes
        put :update, {:destination_id => @destination.id, :card => valid_attributes}, valid_session
        assigns(:card).should eq(card)
      end

      it "redirects to the card" do
        card = @destination.create_card! valid_attributes
        put :update, {:destination_id => @destination.id, :card => valid_attributes}, valid_session
        response.should redirect_to(destination_card_url(card))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved card as @card" do
        # Trigger the behavior that occurs when invalid params are submitted
        Card.any_instance.stub(:save).and_return(false)
        put :update, {:destination_id => @destination.id, :card => {  }}, valid_session
        assigns(:card).should be_a_new(Card)
      end

      it "assigns the card as @card" do
        card = @destination.create_card! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Card.any_instance.stub(:save).and_return(false)
        put :update, {:destination_id => @destination.id, :card => {  }}, valid_session
        assigns(:card).should eq(card)
      end

      it "re-renders the 'edit' template" do
        card = @destination.create_card! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Card.any_instance.stub(:save).and_return(false)
        put :update, {:destination_id => @destination.id, :card => {  }}, valid_session
        response.status.should be 422
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested card" do
      card = @destination.create_card! valid_attributes
      expect {
        delete :destroy, {:destination_id => @destination.id}, valid_session
      }.to change(Card, :count).by(-1)
    end

    it "redirects to the cards list" do
      card = @destination.create_card! valid_attributes
      delete :destroy, {:destination_id => @destination.id}, valid_session
      response.should redirect_to(destination_card_url(@destination))
    end
  end

end
